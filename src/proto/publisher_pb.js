// source: publisher.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BeginOAuthFlowRequest', null, global);
goog.exportSymbol('proto.BeginOAuthFlowResponse', null, global);
goog.exportSymbol('proto.CompleteOAuthFlowRequest', null, global);
goog.exportSymbol('proto.CompleteOAuthFlowResponse', null, global);
goog.exportSymbol('proto.ConfigurationFormRequest', null, global);
goog.exportSymbol('proto.ConfigurationFormResponse', null, global);
goog.exportSymbol('proto.ConfigureConnectionRequest', null, global);
goog.exportSymbol('proto.ConfigureConnectionResponse', null, global);
goog.exportSymbol('proto.ConfigureQueryRequest', null, global);
goog.exportSymbol('proto.ConfigureQueryResponse', null, global);
goog.exportSymbol('proto.ConfigureRealTimeRequest', null, global);
goog.exportSymbol('proto.ConfigureRealTimeResponse', null, global);
goog.exportSymbol('proto.ConfigureReplicationRequest', null, global);
goog.exportSymbol('proto.ConfigureReplicationResponse', null, global);
goog.exportSymbol('proto.ConfigureRequest', null, global);
goog.exportSymbol('proto.ConfigureResponse', null, global);
goog.exportSymbol('proto.ConfigureWriteRequest', null, global);
goog.exportSymbol('proto.ConfigureWriteResponse', null, global);
goog.exportSymbol('proto.ConnectRequest', null, global);
goog.exportSymbol('proto.ConnectResponse', null, global);
goog.exportSymbol('proto.Count', null, global);
goog.exportSymbol('proto.Count.Kind', null, global);
goog.exportSymbol('proto.DataVersions', null, global);
goog.exportSymbol('proto.DisconnectRequest', null, global);
goog.exportSymbol('proto.DisconnectResponse', null, global);
goog.exportSymbol('proto.DiscoverRelatedEntitiesRequest', null, global);
goog.exportSymbol('proto.DiscoverRelatedEntitiesResponse', null, global);
goog.exportSymbol('proto.DiscoverSchemasRequest', null, global);
goog.exportSymbol('proto.DiscoverSchemasRequest.Mode', null, global);
goog.exportSymbol('proto.DiscoverSchemasResponse', null, global);
goog.exportSymbol('proto.LogLevel', null, global);
goog.exportSymbol('proto.OAuthConfiguration', null, global);
goog.exportSymbol('proto.PrepareWriteRequest', null, global);
goog.exportSymbol('proto.PrepareWriteResponse', null, global);
goog.exportSymbol('proto.Property', null, global);
goog.exportSymbol('proto.PropertyType', null, global);
goog.exportSymbol('proto.PublishFilter', null, global);
goog.exportSymbol('proto.PublishFilter.Kind', null, global);
goog.exportSymbol('proto.ReadRequest', null, global);
goog.exportSymbol('proto.Record', null, global);
goog.exportSymbol('proto.Record.Action', null, global);
goog.exportSymbol('proto.RecordAck', null, global);
goog.exportSymbol('proto.RecordVersion', null, global);
goog.exportSymbol('proto.RelatedEntity', null, global);
goog.exportSymbol('proto.ReplicationWriteRequest', null, global);
goog.exportSymbol('proto.ReplicationWriteVersion', null, global);
goog.exportSymbol('proto.Schema', null, global);
goog.exportSymbol('proto.Schema.DataFlowDirection', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataVersions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DataVersions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataVersions.displayName = 'proto.DataVersions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureRequest.displayName = 'proto.ConfigureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureResponse.displayName = 'proto.ConfigureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectRequest.displayName = 'proto.ConnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectResponse.displayName = 'proto.ConnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReadRequest.repeatedFields_, null);
};
goog.inherits(proto.ReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReadRequest.displayName = 'proto.ReadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PublishFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PublishFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PublishFilter.displayName = 'proto.PublishFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DiscoverSchemasRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DiscoverSchemasRequest.repeatedFields_, null);
};
goog.inherits(proto.DiscoverSchemasRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DiscoverSchemasRequest.displayName = 'proto.DiscoverSchemasRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DiscoverSchemasResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DiscoverSchemasResponse.repeatedFields_, null);
};
goog.inherits(proto.DiscoverSchemasResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DiscoverSchemasResponse.displayName = 'proto.DiscoverSchemasResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Schema.repeatedFields_, null);
};
goog.inherits(proto.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Schema.displayName = 'proto.Schema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Count = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Count, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Count.displayName = 'proto.Count';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Property.displayName = 'proto.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DisconnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DisconnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DisconnectRequest.displayName = 'proto.DisconnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DisconnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DisconnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DisconnectResponse.displayName = 'proto.DisconnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Record.repeatedFields_, null);
};
goog.inherits(proto.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Record.displayName = 'proto.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RecordVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RecordVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RecordVersion.displayName = 'proto.RecordVersion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureQueryRequest.displayName = 'proto.ConfigureQueryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureQueryResponse.displayName = 'proto.ConfigureQueryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureConnectionRequest.displayName = 'proto.ConfigureConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureConnectionResponse.displayName = 'proto.ConfigureConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureRealTimeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureRealTimeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureRealTimeRequest.displayName = 'proto.ConfigureRealTimeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureRealTimeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureRealTimeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureRealTimeResponse.displayName = 'proto.ConfigureRealTimeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigurationFormRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigurationFormRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigurationFormRequest.displayName = 'proto.ConfigurationFormRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigurationFormResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ConfigurationFormResponse.repeatedFields_, null);
};
goog.inherits(proto.ConfigurationFormResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigurationFormResponse.displayName = 'proto.ConfigurationFormResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BeginOAuthFlowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BeginOAuthFlowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BeginOAuthFlowRequest.displayName = 'proto.BeginOAuthFlowRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BeginOAuthFlowResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BeginOAuthFlowResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BeginOAuthFlowResponse.displayName = 'proto.BeginOAuthFlowResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CompleteOAuthFlowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CompleteOAuthFlowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CompleteOAuthFlowRequest.displayName = 'proto.CompleteOAuthFlowRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OAuthConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OAuthConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OAuthConfiguration.displayName = 'proto.OAuthConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CompleteOAuthFlowResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CompleteOAuthFlowResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CompleteOAuthFlowResponse.displayName = 'proto.CompleteOAuthFlowResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureWriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureWriteRequest.displayName = 'proto.ConfigureWriteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureWriteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureWriteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureWriteResponse.displayName = 'proto.ConfigureWriteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureReplicationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ConfigureReplicationRequest.repeatedFields_, null);
};
goog.inherits(proto.ConfigureReplicationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureReplicationRequest.displayName = 'proto.ConfigureReplicationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigureReplicationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigureReplicationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigureReplicationResponse.displayName = 'proto.ConfigureReplicationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PrepareWriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PrepareWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PrepareWriteRequest.displayName = 'proto.PrepareWriteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReplicationWriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReplicationWriteRequest.repeatedFields_, null);
};
goog.inherits(proto.ReplicationWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReplicationWriteRequest.displayName = 'proto.ReplicationWriteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReplicationWriteVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReplicationWriteVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReplicationWriteVersion.displayName = 'proto.ReplicationWriteVersion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PrepareWriteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PrepareWriteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PrepareWriteResponse.displayName = 'proto.PrepareWriteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RecordAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RecordAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RecordAck.displayName = 'proto.RecordAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DiscoverRelatedEntitiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DiscoverRelatedEntitiesRequest.repeatedFields_, null);
};
goog.inherits(proto.DiscoverRelatedEntitiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DiscoverRelatedEntitiesRequest.displayName = 'proto.DiscoverRelatedEntitiesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DiscoverRelatedEntitiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DiscoverRelatedEntitiesResponse.repeatedFields_, null);
};
goog.inherits(proto.DiscoverRelatedEntitiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DiscoverRelatedEntitiesResponse.displayName = 'proto.DiscoverRelatedEntitiesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RelatedEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RelatedEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RelatedEntity.displayName = 'proto.RelatedEntity';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataVersions.prototype.toObject = function(opt_includeInstance) {
  return proto.DataVersions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataVersions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataVersions.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jobDataVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shapeId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shapeDataVersion: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataVersions}
 */
proto.DataVersions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataVersions;
  return proto.DataVersions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataVersions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataVersions}
 */
proto.DataVersions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJobDataVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShapeId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShapeDataVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataVersions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataVersions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataVersions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataVersions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJobDataVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getShapeId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShapeDataVersion();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string job_id = 1;
 * @return {string}
 */
proto.DataVersions.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataVersions} returns this
 */
proto.DataVersions.prototype.setJobId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 job_data_version = 2;
 * @return {number}
 */
proto.DataVersions.prototype.getJobDataVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataVersions} returns this
 */
proto.DataVersions.prototype.setJobDataVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string shape_id = 3;
 * @return {string}
 */
proto.DataVersions.prototype.getShapeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataVersions} returns this
 */
proto.DataVersions.prototype.setShapeId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 shape_data_version = 4;
 * @return {number}
 */
proto.DataVersions.prototype.getShapeDataVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataVersions} returns this
 */
proto.DataVersions.prototype.setShapeDataVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    logLevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logDirectory: jspb.Message.getFieldWithDefault(msg, 2, ""),
    permanentDirectory: jspb.Message.getFieldWithDefault(msg, 3, ""),
    temporaryDirectory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dataVersions: (f = msg.getDataVersions()) && proto.DataVersions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureRequest}
 */
proto.ConfigureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureRequest;
  return proto.ConfigureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureRequest}
 */
proto.ConfigureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.LogLevel} */ (reader.readEnum());
      msg.setLogLevel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogDirectory(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermanentDirectory(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemporaryDirectory(value);
      break;
    case 5:
      var value = new proto.DataVersions;
      reader.readMessage(value,proto.DataVersions.deserializeBinaryFromReader);
      msg.setDataVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLogDirectory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPermanentDirectory();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTemporaryDirectory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDataVersions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DataVersions.serializeBinaryToWriter
    );
  }
};


/**
 * optional LogLevel log_level = 1;
 * @return {!proto.LogLevel}
 */
proto.ConfigureRequest.prototype.getLogLevel = function() {
  return /** @type {!proto.LogLevel} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.LogLevel} value
 * @return {!proto.ConfigureRequest} returns this
 */
proto.ConfigureRequest.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string log_directory = 2;
 * @return {string}
 */
proto.ConfigureRequest.prototype.getLogDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigureRequest} returns this
 */
proto.ConfigureRequest.prototype.setLogDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string permanent_directory = 3;
 * @return {string}
 */
proto.ConfigureRequest.prototype.getPermanentDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigureRequest} returns this
 */
proto.ConfigureRequest.prototype.setPermanentDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string temporary_directory = 4;
 * @return {string}
 */
proto.ConfigureRequest.prototype.getTemporaryDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigureRequest} returns this
 */
proto.ConfigureRequest.prototype.setTemporaryDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional DataVersions data_versions = 5;
 * @return {?proto.DataVersions}
 */
proto.ConfigureRequest.prototype.getDataVersions = function() {
  return /** @type{?proto.DataVersions} */ (
    jspb.Message.getWrapperField(this, proto.DataVersions, 5));
};


/**
 * @param {?proto.DataVersions|undefined} value
 * @return {!proto.ConfigureRequest} returns this
*/
proto.ConfigureRequest.prototype.setDataVersions = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureRequest} returns this
 */
proto.ConfigureRequest.prototype.clearDataVersions = function() {
  return this.setDataVersions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureRequest.prototype.hasDataVersions = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureResponse}
 */
proto.ConfigureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureResponse;
  return proto.ConfigureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureResponse}
 */
proto.ConfigureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    settingsJson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oauthConfiguration: (f = msg.getOauthConfiguration()) && proto.OAuthConfiguration.toObject(includeInstance, f),
    oauthStateJson: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dataVersions: (f = msg.getDataVersions()) && proto.DataVersions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectRequest}
 */
proto.ConnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectRequest;
  return proto.ConnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectRequest}
 */
proto.ConnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettingsJson(value);
      break;
    case 3:
      var value = new proto.OAuthConfiguration;
      reader.readMessage(value,proto.OAuthConfiguration.deserializeBinaryFromReader);
      msg.setOauthConfiguration(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOauthStateJson(value);
      break;
    case 5:
      var value = new proto.DataVersions;
      reader.readMessage(value,proto.DataVersions.deserializeBinaryFromReader);
      msg.setDataVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettingsJson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOauthConfiguration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OAuthConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getOauthStateJson();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDataVersions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DataVersions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string settings_json = 2;
 * @return {string}
 */
proto.ConnectRequest.prototype.getSettingsJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectRequest} returns this
 */
proto.ConnectRequest.prototype.setSettingsJson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional OAuthConfiguration oauth_configuration = 3;
 * @return {?proto.OAuthConfiguration}
 */
proto.ConnectRequest.prototype.getOauthConfiguration = function() {
  return /** @type{?proto.OAuthConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.OAuthConfiguration, 3));
};


/**
 * @param {?proto.OAuthConfiguration|undefined} value
 * @return {!proto.ConnectRequest} returns this
*/
proto.ConnectRequest.prototype.setOauthConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectRequest} returns this
 */
proto.ConnectRequest.prototype.clearOauthConfiguration = function() {
  return this.setOauthConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectRequest.prototype.hasOauthConfiguration = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string oauth_state_json = 4;
 * @return {string}
 */
proto.ConnectRequest.prototype.getOauthStateJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectRequest} returns this
 */
proto.ConnectRequest.prototype.setOauthStateJson = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional DataVersions data_versions = 5;
 * @return {?proto.DataVersions}
 */
proto.ConnectRequest.prototype.getDataVersions = function() {
  return /** @type{?proto.DataVersions} */ (
    jspb.Message.getWrapperField(this, proto.DataVersions, 5));
};


/**
 * @param {?proto.DataVersions|undefined} value
 * @return {!proto.ConnectRequest} returns this
*/
proto.ConnectRequest.prototype.setDataVersions = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectRequest} returns this
 */
proto.ConnectRequest.prototype.clearDataVersions = function() {
  return this.setDataVersions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectRequest.prototype.hasDataVersions = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    settingsError: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionError: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oauthError: jspb.Message.getFieldWithDefault(msg, 3, ""),
    oauthStateJson: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectResponse}
 */
proto.ConnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectResponse;
  return proto.ConnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectResponse}
 */
proto.ConnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettingsError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionError(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOauthError(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOauthStateJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettingsError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOauthError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOauthStateJson();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string settings_error = 1;
 * @return {string}
 */
proto.ConnectResponse.prototype.getSettingsError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectResponse} returns this
 */
proto.ConnectResponse.prototype.setSettingsError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_error = 2;
 * @return {string}
 */
proto.ConnectResponse.prototype.getConnectionError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectResponse} returns this
 */
proto.ConnectResponse.prototype.setConnectionError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string oauth_error = 3;
 * @return {string}
 */
proto.ConnectResponse.prototype.getOauthError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectResponse} returns this
 */
proto.ConnectResponse.prototype.setOauthError = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string oauth_state_json = 4;
 * @return {string}
 */
proto.ConnectResponse.prototype.getOauthStateJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectResponse} returns this
 */
proto.ConnectResponse.prototype.setOauthStateJson = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReadRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ReadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: (f = msg.getSchema()) && proto.Schema.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.PublishFilter.toObject, includeInstance),
    realTimeSettingsJson: jspb.Message.getFieldWithDefault(msg, 6, ""),
    realTimeStateJson: jspb.Message.getFieldWithDefault(msg, 7, ""),
    jobId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    dataVersion: jspb.Message.getFieldWithDefault(msg, 9, 0),
    dataVersions: (f = msg.getDataVersions()) && proto.DataVersions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReadRequest}
 */
proto.ReadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReadRequest;
  return proto.ReadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReadRequest}
 */
proto.ReadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = new proto.PublishFilter;
      reader.readMessage(value,proto.PublishFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealTimeSettingsJson(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealTimeStateJson(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDataVersion(value);
      break;
    case 10:
      var value = new proto.DataVersions;
      reader.readMessage(value,proto.DataVersions.deserializeBinaryFromReader);
      msg.setDataVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.PublishFilter.serializeBinaryToWriter
    );
  }
  f = message.getRealTimeSettingsJson();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRealTimeStateJson();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDataVersion();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getDataVersions();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.DataVersions.serializeBinaryToWriter
    );
  }
};


/**
 * optional Schema schema = 1;
 * @return {?proto.Schema}
 */
proto.ReadRequest.prototype.getSchema = function() {
  return /** @type{?proto.Schema} */ (
    jspb.Message.getWrapperField(this, proto.Schema, 1));
};


/**
 * @param {?proto.Schema|undefined} value
 * @return {!proto.ReadRequest} returns this
*/
proto.ReadRequest.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReadRequest} returns this
 */
proto.ReadRequest.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReadRequest.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.ReadRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReadRequest} returns this
 */
proto.ReadRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PublishFilter filters = 3;
 * @return {!Array<!proto.PublishFilter>}
 */
proto.ReadRequest.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.PublishFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PublishFilter, 3));
};


/**
 * @param {!Array<!proto.PublishFilter>} value
 * @return {!proto.ReadRequest} returns this
*/
proto.ReadRequest.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PublishFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PublishFilter}
 */
proto.ReadRequest.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PublishFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ReadRequest} returns this
 */
proto.ReadRequest.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};


/**
 * optional string real_time_settings_json = 6;
 * @return {string}
 */
proto.ReadRequest.prototype.getRealTimeSettingsJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReadRequest} returns this
 */
proto.ReadRequest.prototype.setRealTimeSettingsJson = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string real_time_state_json = 7;
 * @return {string}
 */
proto.ReadRequest.prototype.getRealTimeStateJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReadRequest} returns this
 */
proto.ReadRequest.prototype.setRealTimeStateJson = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string job_id = 8;
 * @return {string}
 */
proto.ReadRequest.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReadRequest} returns this
 */
proto.ReadRequest.prototype.setJobId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 data_version = 9;
 * @return {number}
 */
proto.ReadRequest.prototype.getDataVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReadRequest} returns this
 */
proto.ReadRequest.prototype.setDataVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional DataVersions data_versions = 10;
 * @return {?proto.DataVersions}
 */
proto.ReadRequest.prototype.getDataVersions = function() {
  return /** @type{?proto.DataVersions} */ (
    jspb.Message.getWrapperField(this, proto.DataVersions, 10));
};


/**
 * @param {?proto.DataVersions|undefined} value
 * @return {!proto.ReadRequest} returns this
*/
proto.ReadRequest.prototype.setDataVersions = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReadRequest} returns this
 */
proto.ReadRequest.prototype.clearDataVersions = function() {
  return this.setDataVersions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReadRequest.prototype.hasDataVersions = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PublishFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.PublishFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PublishFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PublishFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    propertyId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PublishFilter}
 */
proto.PublishFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PublishFilter;
  return proto.PublishFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PublishFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PublishFilter}
 */
proto.PublishFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PublishFilter.Kind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PublishFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PublishFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PublishFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PublishFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPropertyId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.PublishFilter.Kind = {
  EQUALS: 0,
  LESS_THAN: 1,
  GREATER_THAN: 2
};

/**
 * optional Kind kind = 1;
 * @return {!proto.PublishFilter.Kind}
 */
proto.PublishFilter.prototype.getKind = function() {
  return /** @type {!proto.PublishFilter.Kind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.PublishFilter.Kind} value
 * @return {!proto.PublishFilter} returns this
 */
proto.PublishFilter.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string property_id = 2;
 * @return {string}
 */
proto.PublishFilter.prototype.getPropertyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PublishFilter} returns this
 */
proto.PublishFilter.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.PublishFilter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PublishFilter} returns this
 */
proto.PublishFilter.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DiscoverSchemasRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DiscoverSchemasRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DiscoverSchemasRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DiscoverSchemasRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DiscoverSchemasRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toRefreshList: jspb.Message.toObjectList(msg.getToRefreshList(),
    proto.Schema.toObject, includeInstance),
    sampleSize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DiscoverSchemasRequest}
 */
proto.DiscoverSchemasRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DiscoverSchemasRequest;
  return proto.DiscoverSchemasRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DiscoverSchemasRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DiscoverSchemasRequest}
 */
proto.DiscoverSchemasRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DiscoverSchemasRequest.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.addToRefresh(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSampleSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DiscoverSchemasRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DiscoverSchemasRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DiscoverSchemasRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DiscoverSchemasRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getToRefreshList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
  f = message.getSampleSize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.DiscoverSchemasRequest.Mode = {
  ALL: 0,
  REFRESH: 1
};

/**
 * optional Mode mode = 1;
 * @return {!proto.DiscoverSchemasRequest.Mode}
 */
proto.DiscoverSchemasRequest.prototype.getMode = function() {
  return /** @type {!proto.DiscoverSchemasRequest.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.DiscoverSchemasRequest.Mode} value
 * @return {!proto.DiscoverSchemasRequest} returns this
 */
proto.DiscoverSchemasRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Schema to_refresh = 2;
 * @return {!Array<!proto.Schema>}
 */
proto.DiscoverSchemasRequest.prototype.getToRefreshList = function() {
  return /** @type{!Array<!proto.Schema>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Schema, 2));
};


/**
 * @param {!Array<!proto.Schema>} value
 * @return {!proto.DiscoverSchemasRequest} returns this
*/
proto.DiscoverSchemasRequest.prototype.setToRefreshList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Schema=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Schema}
 */
proto.DiscoverSchemasRequest.prototype.addToRefresh = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Schema, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DiscoverSchemasRequest} returns this
 */
proto.DiscoverSchemasRequest.prototype.clearToRefreshList = function() {
  return this.setToRefreshList([]);
};


/**
 * optional uint32 sample_size = 4;
 * @return {number}
 */
proto.DiscoverSchemasRequest.prototype.getSampleSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DiscoverSchemasRequest} returns this
 */
proto.DiscoverSchemasRequest.prototype.setSampleSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DiscoverSchemasResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DiscoverSchemasResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DiscoverSchemasResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DiscoverSchemasResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DiscoverSchemasResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemasList: jspb.Message.toObjectList(msg.getSchemasList(),
    proto.Schema.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DiscoverSchemasResponse}
 */
proto.DiscoverSchemasResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DiscoverSchemasResponse;
  return proto.DiscoverSchemasResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DiscoverSchemasResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DiscoverSchemasResponse}
 */
proto.DiscoverSchemasResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.addSchemas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DiscoverSchemasResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DiscoverSchemasResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DiscoverSchemasResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DiscoverSchemasResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Schema schemas = 1;
 * @return {!Array<!proto.Schema>}
 */
proto.DiscoverSchemasResponse.prototype.getSchemasList = function() {
  return /** @type{!Array<!proto.Schema>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Schema, 1));
};


/**
 * @param {!Array<!proto.Schema>} value
 * @return {!proto.DiscoverSchemasResponse} returns this
*/
proto.DiscoverSchemasResponse.prototype.setSchemasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Schema=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Schema}
 */
proto.DiscoverSchemasResponse.prototype.addSchemas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Schema, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DiscoverSchemasResponse} returns this
 */
proto.DiscoverSchemasResponse.prototype.clearSchemasList = function() {
  return this.setSchemasList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Schema.repeatedFields_ = [4,6,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.Property.toObject, includeInstance),
    count: (f = msg.getCount()) && proto.Count.toObject(includeInstance, f),
    sampleList: jspb.Message.toObjectList(msg.getSampleList(),
    proto.Record.toObject, includeInstance),
    query: jspb.Message.getFieldWithDefault(msg, 7, ""),
    publisherMetaJson: jspb.Message.getFieldWithDefault(msg, 8, ""),
    errorsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    dataFlowDirection: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Schema}
 */
proto.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Schema;
  return proto.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Schema}
 */
proto.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.Property;
      reader.readMessage(value,proto.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    case 5:
      var value = new proto.Count;
      reader.readMessage(value,proto.Count.deserializeBinaryFromReader);
      msg.setCount(value);
      break;
    case 6:
      var value = new proto.Record;
      reader.readMessage(value,proto.Record.deserializeBinaryFromReader);
      msg.addSample(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublisherMetaJson(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    case 10:
      var value = /** @type {!proto.Schema.DataFlowDirection} */ (reader.readEnum());
      msg.setDataFlowDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Property.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Count.serializeBinaryToWriter
    );
  }
  f = message.getSampleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Record.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPublisherMetaJson();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getDataFlowDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Schema.DataFlowDirection = {
  READ: 0,
  WRITE: 1,
  READ_WRITE: 2
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.Schema.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Schema.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.Schema.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Property properties = 4;
 * @return {!Array<!proto.Property>}
 */
proto.Schema.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Property, 4));
};


/**
 * @param {!Array<!proto.Property>} value
 * @return {!proto.Schema} returns this
*/
proto.Schema.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Property}
 */
proto.Schema.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};


/**
 * optional Count count = 5;
 * @return {?proto.Count}
 */
proto.Schema.prototype.getCount = function() {
  return /** @type{?proto.Count} */ (
    jspb.Message.getWrapperField(this, proto.Count, 5));
};


/**
 * @param {?proto.Count|undefined} value
 * @return {!proto.Schema} returns this
*/
proto.Schema.prototype.setCount = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.clearCount = function() {
  return this.setCount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Schema.prototype.hasCount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Record sample = 6;
 * @return {!Array<!proto.Record>}
 */
proto.Schema.prototype.getSampleList = function() {
  return /** @type{!Array<!proto.Record>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Record, 6));
};


/**
 * @param {!Array<!proto.Record>} value
 * @return {!proto.Schema} returns this
*/
proto.Schema.prototype.setSampleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Record=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Record}
 */
proto.Schema.prototype.addSample = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Record, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.clearSampleList = function() {
  return this.setSampleList([]);
};


/**
 * optional string query = 7;
 * @return {string}
 */
proto.Schema.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string publisher_meta_json = 8;
 * @return {string}
 */
proto.Schema.prototype.getPublisherMetaJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.setPublisherMetaJson = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated string errors = 9;
 * @return {!Array<string>}
 */
proto.Schema.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.setErrorsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.addErrors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};


/**
 * optional DataFlowDirection data_flow_direction = 10;
 * @return {!proto.Schema.DataFlowDirection}
 */
proto.Schema.prototype.getDataFlowDirection = function() {
  return /** @type {!proto.Schema.DataFlowDirection} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.Schema.DataFlowDirection} value
 * @return {!proto.Schema} returns this
 */
proto.Schema.prototype.setDataFlowDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Count.prototype.toObject = function(opt_includeInstance) {
  return proto.Count.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Count} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Count.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Count}
 */
proto.Count.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Count;
  return proto.Count.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Count} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Count}
 */
proto.Count.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Count.Kind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Count.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Count.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Count} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Count.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Count.Kind = {
  UNAVAILABLE: 0,
  ESTIMATE: 1,
  EXACT: 2
};

/**
 * optional Kind kind = 1;
 * @return {!proto.Count.Kind}
 */
proto.Count.prototype.getKind = function() {
  return /** @type {!proto.Count.Kind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Count.Kind} value
 * @return {!proto.Count} returns this
 */
proto.Count.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.Count.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Count} returns this
 */
proto.Count.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isKey: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isCreateCounter: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isUpdateCounter: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    publisherMetaJson: jspb.Message.getFieldWithDefault(msg, 8, ""),
    typeAtSource: jspb.Message.getFieldWithDefault(msg, 9, ""),
    isNullable: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Property}
 */
proto.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Property;
  return proto.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Property}
 */
proto.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {!proto.PropertyType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsKey(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCreateCounter(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUpdateCounter(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublisherMetaJson(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeAtSource(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNullable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getIsKey();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsCreateCounter();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsUpdateCounter();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPublisherMetaJson();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTypeAtSource();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIsNullable();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Property.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Property.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.Property.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PropertyType type = 4;
 * @return {!proto.PropertyType}
 */
proto.Property.prototype.getType = function() {
  return /** @type {!proto.PropertyType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.PropertyType} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool is_key = 5;
 * @return {boolean}
 */
proto.Property.prototype.getIsKey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setIsKey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_create_counter = 6;
 * @return {boolean}
 */
proto.Property.prototype.getIsCreateCounter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setIsCreateCounter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_update_counter = 7;
 * @return {boolean}
 */
proto.Property.prototype.getIsUpdateCounter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setIsUpdateCounter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string publisher_meta_json = 8;
 * @return {string}
 */
proto.Property.prototype.getPublisherMetaJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setPublisherMetaJson = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string type_at_source = 9;
 * @return {string}
 */
proto.Property.prototype.getTypeAtSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setTypeAtSource = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool is_nullable = 10;
 * @return {boolean}
 */
proto.Property.prototype.getIsNullable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Property} returns this
 */
proto.Property.prototype.setIsNullable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DisconnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DisconnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DisconnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DisconnectRequest}
 */
proto.DisconnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DisconnectRequest;
  return proto.DisconnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DisconnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DisconnectRequest}
 */
proto.DisconnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DisconnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DisconnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DisconnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DisconnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DisconnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DisconnectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DisconnectResponse}
 */
proto.DisconnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DisconnectResponse;
  return proto.DisconnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DisconnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DisconnectResponse}
 */
proto.DisconnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DisconnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DisconnectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DisconnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Record.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataJson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    realTimeStateJson: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cause: jspb.Message.getFieldWithDefault(msg, 4, ""),
    correlationId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    recordId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    versionsList: jspb.Message.toObjectList(msg.getVersionsList(),
    proto.RecordVersion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Record}
 */
proto.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Record;
  return proto.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Record}
 */
proto.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Record.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataJson(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealTimeStateJson(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCause(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordId(value);
      break;
    case 7:
      var value = new proto.RecordVersion;
      reader.readMessage(value,proto.RecordVersion.deserializeBinaryFromReader);
      msg.addVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDataJson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRealTimeStateJson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCause();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRecordId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.RecordVersion.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Record.Action = {
  UPSERT: 0,
  INSERT: 1,
  UPDATE: 2,
  DELETE: 3,
  REAL_TIME_STATE_COMMIT: 4
};

/**
 * optional Action action = 1;
 * @return {!proto.Record.Action}
 */
proto.Record.prototype.getAction = function() {
  return /** @type {!proto.Record.Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Record.Action} value
 * @return {!proto.Record} returns this
 */
proto.Record.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string data_json = 2;
 * @return {string}
 */
proto.Record.prototype.getDataJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Record} returns this
 */
proto.Record.prototype.setDataJson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string real_time_state_json = 3;
 * @return {string}
 */
proto.Record.prototype.getRealTimeStateJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Record} returns this
 */
proto.Record.prototype.setRealTimeStateJson = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string cause = 4;
 * @return {string}
 */
proto.Record.prototype.getCause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Record} returns this
 */
proto.Record.prototype.setCause = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string correlation_id = 5;
 * @return {string}
 */
proto.Record.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Record} returns this
 */
proto.Record.prototype.setCorrelationId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string record_id = 6;
 * @return {string}
 */
proto.Record.prototype.getRecordId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Record} returns this
 */
proto.Record.prototype.setRecordId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated RecordVersion versions = 7;
 * @return {!Array<!proto.RecordVersion>}
 */
proto.Record.prototype.getVersionsList = function() {
  return /** @type{!Array<!proto.RecordVersion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RecordVersion, 7));
};


/**
 * @param {!Array<!proto.RecordVersion>} value
 * @return {!proto.Record} returns this
*/
proto.Record.prototype.setVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.RecordVersion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RecordVersion}
 */
proto.Record.prototype.addVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.RecordVersion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Record} returns this
 */
proto.Record.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RecordVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.RecordVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RecordVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RecordVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jobId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    schemaId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recordId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dataJson: jspb.Message.getFieldWithDefault(msg, 5, ""),
    schemaDataJson: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RecordVersion}
 */
proto.RecordVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RecordVersion;
  return proto.RecordVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RecordVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RecordVersion}
 */
proto.RecordVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataJson(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaDataJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RecordVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RecordVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RecordVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RecordVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecordId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDataJson();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSchemaDataJson();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.RecordVersion.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RecordVersion} returns this
 */
proto.RecordVersion.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string job_id = 2;
 * @return {string}
 */
proto.RecordVersion.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RecordVersion} returns this
 */
proto.RecordVersion.prototype.setJobId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string schema_id = 3;
 * @return {string}
 */
proto.RecordVersion.prototype.getSchemaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RecordVersion} returns this
 */
proto.RecordVersion.prototype.setSchemaId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string record_id = 4;
 * @return {string}
 */
proto.RecordVersion.prototype.getRecordId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RecordVersion} returns this
 */
proto.RecordVersion.prototype.setRecordId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string data_json = 5;
 * @return {string}
 */
proto.RecordVersion.prototype.getDataJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.RecordVersion} returns this
 */
proto.RecordVersion.prototype.setDataJson = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string schema_data_json = 6;
 * @return {string}
 */
proto.RecordVersion.prototype.getSchemaDataJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.RecordVersion} returns this
 */
proto.RecordVersion.prototype.setSchemaDataJson = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureQueryRequest}
 */
proto.ConfigureQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureQueryRequest;
  return proto.ConfigureQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureQueryRequest}
 */
proto.ConfigureQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormRequest;
      reader.readMessage(value,proto.ConfigurationFormRequest.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormRequest form = 1;
 * @return {?proto.ConfigurationFormRequest}
 */
proto.ConfigureQueryRequest.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormRequest} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormRequest, 1));
};


/**
 * @param {?proto.ConfigurationFormRequest|undefined} value
 * @return {!proto.ConfigureQueryRequest} returns this
*/
proto.ConfigureQueryRequest.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureQueryRequest} returns this
 */
proto.ConfigureQueryRequest.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureQueryRequest.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormResponse.toObject(includeInstance, f),
    schema: (f = msg.getSchema()) && proto.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureQueryResponse}
 */
proto.ConfigureQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureQueryResponse;
  return proto.ConfigureQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureQueryResponse}
 */
proto.ConfigureQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormResponse;
      reader.readMessage(value,proto.ConfigurationFormResponse.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    case 2:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormResponse.serializeBinaryToWriter
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormResponse form = 1;
 * @return {?proto.ConfigurationFormResponse}
 */
proto.ConfigureQueryResponse.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormResponse} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormResponse, 1));
};


/**
 * @param {?proto.ConfigurationFormResponse|undefined} value
 * @return {!proto.ConfigureQueryResponse} returns this
*/
proto.ConfigureQueryResponse.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureQueryResponse} returns this
 */
proto.ConfigureQueryResponse.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureQueryResponse.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Schema schema = 2;
 * @return {?proto.Schema}
 */
proto.ConfigureQueryResponse.prototype.getSchema = function() {
  return /** @type{?proto.Schema} */ (
    jspb.Message.getWrapperField(this, proto.Schema, 2));
};


/**
 * @param {?proto.Schema|undefined} value
 * @return {!proto.ConfigureQueryResponse} returns this
*/
proto.ConfigureQueryResponse.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureQueryResponse} returns this
 */
proto.ConfigureQueryResponse.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureQueryResponse.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormRequest.toObject(includeInstance, f),
    connectRequest: (f = msg.getConnectRequest()) && proto.ConnectRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureConnectionRequest}
 */
proto.ConfigureConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureConnectionRequest;
  return proto.ConfigureConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureConnectionRequest}
 */
proto.ConfigureConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormRequest;
      reader.readMessage(value,proto.ConfigurationFormRequest.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    case 2:
      var value = new proto.ConnectRequest;
      reader.readMessage(value,proto.ConnectRequest.deserializeBinaryFromReader);
      msg.setConnectRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormRequest.serializeBinaryToWriter
    );
  }
  f = message.getConnectRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConnectRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormRequest form = 1;
 * @return {?proto.ConfigurationFormRequest}
 */
proto.ConfigureConnectionRequest.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormRequest} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormRequest, 1));
};


/**
 * @param {?proto.ConfigurationFormRequest|undefined} value
 * @return {!proto.ConfigureConnectionRequest} returns this
*/
proto.ConfigureConnectionRequest.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureConnectionRequest} returns this
 */
proto.ConfigureConnectionRequest.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureConnectionRequest.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConnectRequest connect_request = 2;
 * @return {?proto.ConnectRequest}
 */
proto.ConfigureConnectionRequest.prototype.getConnectRequest = function() {
  return /** @type{?proto.ConnectRequest} */ (
    jspb.Message.getWrapperField(this, proto.ConnectRequest, 2));
};


/**
 * @param {?proto.ConnectRequest|undefined} value
 * @return {!proto.ConfigureConnectionRequest} returns this
*/
proto.ConfigureConnectionRequest.prototype.setConnectRequest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureConnectionRequest} returns this
 */
proto.ConfigureConnectionRequest.prototype.clearConnectRequest = function() {
  return this.setConnectRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureConnectionRequest.prototype.hasConnectRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormResponse.toObject(includeInstance, f),
    connectResponse: (f = msg.getConnectResponse()) && proto.ConnectResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureConnectionResponse}
 */
proto.ConfigureConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureConnectionResponse;
  return proto.ConfigureConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureConnectionResponse}
 */
proto.ConfigureConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormResponse;
      reader.readMessage(value,proto.ConfigurationFormResponse.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    case 2:
      var value = new proto.ConnectResponse;
      reader.readMessage(value,proto.ConnectResponse.deserializeBinaryFromReader);
      msg.setConnectResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormResponse.serializeBinaryToWriter
    );
  }
  f = message.getConnectResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConnectResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormResponse form = 1;
 * @return {?proto.ConfigurationFormResponse}
 */
proto.ConfigureConnectionResponse.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormResponse} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormResponse, 1));
};


/**
 * @param {?proto.ConfigurationFormResponse|undefined} value
 * @return {!proto.ConfigureConnectionResponse} returns this
*/
proto.ConfigureConnectionResponse.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureConnectionResponse} returns this
 */
proto.ConfigureConnectionResponse.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureConnectionResponse.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConnectResponse connect_response = 2;
 * @return {?proto.ConnectResponse}
 */
proto.ConfigureConnectionResponse.prototype.getConnectResponse = function() {
  return /** @type{?proto.ConnectResponse} */ (
    jspb.Message.getWrapperField(this, proto.ConnectResponse, 2));
};


/**
 * @param {?proto.ConnectResponse|undefined} value
 * @return {!proto.ConfigureConnectionResponse} returns this
*/
proto.ConfigureConnectionResponse.prototype.setConnectResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureConnectionResponse} returns this
 */
proto.ConfigureConnectionResponse.prototype.clearConnectResponse = function() {
  return this.setConnectResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureConnectionResponse.prototype.hasConnectResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureRealTimeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureRealTimeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureRealTimeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureRealTimeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormRequest.toObject(includeInstance, f),
    schema: (f = msg.getSchema()) && proto.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureRealTimeRequest}
 */
proto.ConfigureRealTimeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureRealTimeRequest;
  return proto.ConfigureRealTimeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureRealTimeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureRealTimeRequest}
 */
proto.ConfigureRealTimeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormRequest;
      reader.readMessage(value,proto.ConfigurationFormRequest.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    case 2:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureRealTimeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureRealTimeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureRealTimeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureRealTimeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormRequest.serializeBinaryToWriter
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormRequest form = 1;
 * @return {?proto.ConfigurationFormRequest}
 */
proto.ConfigureRealTimeRequest.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormRequest} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormRequest, 1));
};


/**
 * @param {?proto.ConfigurationFormRequest|undefined} value
 * @return {!proto.ConfigureRealTimeRequest} returns this
*/
proto.ConfigureRealTimeRequest.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureRealTimeRequest} returns this
 */
proto.ConfigureRealTimeRequest.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureRealTimeRequest.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Schema schema = 2;
 * @return {?proto.Schema}
 */
proto.ConfigureRealTimeRequest.prototype.getSchema = function() {
  return /** @type{?proto.Schema} */ (
    jspb.Message.getWrapperField(this, proto.Schema, 2));
};


/**
 * @param {?proto.Schema|undefined} value
 * @return {!proto.ConfigureRealTimeRequest} returns this
*/
proto.ConfigureRealTimeRequest.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureRealTimeRequest} returns this
 */
proto.ConfigureRealTimeRequest.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureRealTimeRequest.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureRealTimeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureRealTimeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureRealTimeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureRealTimeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureRealTimeResponse}
 */
proto.ConfigureRealTimeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureRealTimeResponse;
  return proto.ConfigureRealTimeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureRealTimeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureRealTimeResponse}
 */
proto.ConfigureRealTimeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormResponse;
      reader.readMessage(value,proto.ConfigurationFormResponse.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureRealTimeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureRealTimeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureRealTimeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureRealTimeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormResponse form = 1;
 * @return {?proto.ConfigurationFormResponse}
 */
proto.ConfigureRealTimeResponse.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormResponse} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormResponse, 1));
};


/**
 * @param {?proto.ConfigurationFormResponse|undefined} value
 * @return {!proto.ConfigureRealTimeResponse} returns this
*/
proto.ConfigureRealTimeResponse.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureRealTimeResponse} returns this
 */
proto.ConfigureRealTimeResponse.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureRealTimeResponse.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigurationFormRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigurationFormRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigurationFormRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigurationFormRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataJson: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stateJson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isSave: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigurationFormRequest}
 */
proto.ConfigurationFormRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigurationFormRequest;
  return proto.ConfigurationFormRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigurationFormRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigurationFormRequest}
 */
proto.ConfigurationFormRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataJson(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateJson(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSave(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigurationFormRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigurationFormRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigurationFormRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigurationFormRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStateJson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsSave();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string data_json = 1;
 * @return {string}
 */
proto.ConfigurationFormRequest.prototype.getDataJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigurationFormRequest} returns this
 */
proto.ConfigurationFormRequest.prototype.setDataJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string state_json = 2;
 * @return {string}
 */
proto.ConfigurationFormRequest.prototype.getStateJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigurationFormRequest} returns this
 */
proto.ConfigurationFormRequest.prototype.setStateJson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_save = 3;
 * @return {boolean}
 */
proto.ConfigurationFormRequest.prototype.getIsSave = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigurationFormRequest} returns this
 */
proto.ConfigurationFormRequest.prototype.setIsSave = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConfigurationFormResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigurationFormResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigurationFormResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigurationFormResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigurationFormResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaJson: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uiJson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stateJson: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dataJson: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dataErrorsJson: jspb.Message.getFieldWithDefault(msg, 5, ""),
    errorsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigurationFormResponse}
 */
proto.ConfigurationFormResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigurationFormResponse;
  return proto.ConfigurationFormResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigurationFormResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigurationFormResponse}
 */
proto.ConfigurationFormResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaJson(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUiJson(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateJson(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataJson(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataErrorsJson(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigurationFormResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigurationFormResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigurationFormResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigurationFormResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUiJson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStateJson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDataJson();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDataErrorsJson();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string schema_json = 1;
 * @return {string}
 */
proto.ConfigurationFormResponse.prototype.getSchemaJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigurationFormResponse} returns this
 */
proto.ConfigurationFormResponse.prototype.setSchemaJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ui_json = 2;
 * @return {string}
 */
proto.ConfigurationFormResponse.prototype.getUiJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigurationFormResponse} returns this
 */
proto.ConfigurationFormResponse.prototype.setUiJson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string state_json = 3;
 * @return {string}
 */
proto.ConfigurationFormResponse.prototype.getStateJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigurationFormResponse} returns this
 */
proto.ConfigurationFormResponse.prototype.setStateJson = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string data_json = 4;
 * @return {string}
 */
proto.ConfigurationFormResponse.prototype.getDataJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigurationFormResponse} returns this
 */
proto.ConfigurationFormResponse.prototype.setDataJson = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string data_errors_json = 5;
 * @return {string}
 */
proto.ConfigurationFormResponse.prototype.getDataErrorsJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigurationFormResponse} returns this
 */
proto.ConfigurationFormResponse.prototype.setDataErrorsJson = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string errors = 6;
 * @return {!Array<string>}
 */
proto.ConfigurationFormResponse.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ConfigurationFormResponse} returns this
 */
proto.ConfigurationFormResponse.prototype.setErrorsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ConfigurationFormResponse} returns this
 */
proto.ConfigurationFormResponse.prototype.addErrors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ConfigurationFormResponse} returns this
 */
proto.ConfigurationFormResponse.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BeginOAuthFlowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BeginOAuthFlowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BeginOAuthFlowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BeginOAuthFlowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    configuration: (f = msg.getConfiguration()) && proto.OAuthConfiguration.toObject(includeInstance, f),
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BeginOAuthFlowRequest}
 */
proto.BeginOAuthFlowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BeginOAuthFlowRequest;
  return proto.BeginOAuthFlowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BeginOAuthFlowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BeginOAuthFlowRequest}
 */
proto.BeginOAuthFlowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OAuthConfiguration;
      reader.readMessage(value,proto.OAuthConfiguration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BeginOAuthFlowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BeginOAuthFlowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BeginOAuthFlowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BeginOAuthFlowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.OAuthConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional OAuthConfiguration configuration = 1;
 * @return {?proto.OAuthConfiguration}
 */
proto.BeginOAuthFlowRequest.prototype.getConfiguration = function() {
  return /** @type{?proto.OAuthConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.OAuthConfiguration, 1));
};


/**
 * @param {?proto.OAuthConfiguration|undefined} value
 * @return {!proto.BeginOAuthFlowRequest} returns this
*/
proto.BeginOAuthFlowRequest.prototype.setConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BeginOAuthFlowRequest} returns this
 */
proto.BeginOAuthFlowRequest.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BeginOAuthFlowRequest.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.BeginOAuthFlowRequest.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.BeginOAuthFlowRequest} returns this
 */
proto.BeginOAuthFlowRequest.prototype.setRedirectUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BeginOAuthFlowResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BeginOAuthFlowResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BeginOAuthFlowResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BeginOAuthFlowResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorizationUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BeginOAuthFlowResponse}
 */
proto.BeginOAuthFlowResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BeginOAuthFlowResponse;
  return proto.BeginOAuthFlowResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BeginOAuthFlowResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BeginOAuthFlowResponse}
 */
proto.BeginOAuthFlowResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorizationUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BeginOAuthFlowResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BeginOAuthFlowResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BeginOAuthFlowResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BeginOAuthFlowResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorizationUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string authorization_url = 1;
 * @return {string}
 */
proto.BeginOAuthFlowResponse.prototype.getAuthorizationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.BeginOAuthFlowResponse} returns this
 */
proto.BeginOAuthFlowResponse.prototype.setAuthorizationUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CompleteOAuthFlowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CompleteOAuthFlowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CompleteOAuthFlowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompleteOAuthFlowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    configuration: (f = msg.getConfiguration()) && proto.OAuthConfiguration.toObject(includeInstance, f),
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    redirectBody: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CompleteOAuthFlowRequest}
 */
proto.CompleteOAuthFlowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CompleteOAuthFlowRequest;
  return proto.CompleteOAuthFlowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CompleteOAuthFlowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CompleteOAuthFlowRequest}
 */
proto.CompleteOAuthFlowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OAuthConfiguration;
      reader.readMessage(value,proto.OAuthConfiguration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CompleteOAuthFlowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CompleteOAuthFlowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CompleteOAuthFlowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompleteOAuthFlowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.OAuthConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRedirectBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional OAuthConfiguration configuration = 1;
 * @return {?proto.OAuthConfiguration}
 */
proto.CompleteOAuthFlowRequest.prototype.getConfiguration = function() {
  return /** @type{?proto.OAuthConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.OAuthConfiguration, 1));
};


/**
 * @param {?proto.OAuthConfiguration|undefined} value
 * @return {!proto.CompleteOAuthFlowRequest} returns this
*/
proto.CompleteOAuthFlowRequest.prototype.setConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CompleteOAuthFlowRequest} returns this
 */
proto.CompleteOAuthFlowRequest.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CompleteOAuthFlowRequest.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.CompleteOAuthFlowRequest.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CompleteOAuthFlowRequest} returns this
 */
proto.CompleteOAuthFlowRequest.prototype.setRedirectUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string redirect_body = 3;
 * @return {string}
 */
proto.CompleteOAuthFlowRequest.prototype.getRedirectBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CompleteOAuthFlowRequest} returns this
 */
proto.CompleteOAuthFlowRequest.prototype.setRedirectBody = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OAuthConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.OAuthConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OAuthConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OAuthConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientSecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configurationJson: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OAuthConfiguration}
 */
proto.OAuthConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OAuthConfiguration;
  return proto.OAuthConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OAuthConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OAuthConfiguration}
 */
proto.OAuthConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigurationJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OAuthConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OAuthConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OAuthConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OAuthConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigurationJson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.OAuthConfiguration.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OAuthConfiguration} returns this
 */
proto.OAuthConfiguration.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.OAuthConfiguration.prototype.getClientSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OAuthConfiguration} returns this
 */
proto.OAuthConfiguration.prototype.setClientSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string configuration_json = 3;
 * @return {string}
 */
proto.OAuthConfiguration.prototype.getConfigurationJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OAuthConfiguration} returns this
 */
proto.OAuthConfiguration.prototype.setConfigurationJson = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CompleteOAuthFlowResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CompleteOAuthFlowResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CompleteOAuthFlowResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompleteOAuthFlowResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    oauthStateJson: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CompleteOAuthFlowResponse}
 */
proto.CompleteOAuthFlowResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CompleteOAuthFlowResponse;
  return proto.CompleteOAuthFlowResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CompleteOAuthFlowResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CompleteOAuthFlowResponse}
 */
proto.CompleteOAuthFlowResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOauthStateJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CompleteOAuthFlowResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CompleteOAuthFlowResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CompleteOAuthFlowResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompleteOAuthFlowResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOauthStateJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string oauth_state_json = 1;
 * @return {string}
 */
proto.CompleteOAuthFlowResponse.prototype.getOauthStateJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CompleteOAuthFlowResponse} returns this
 */
proto.CompleteOAuthFlowResponse.prototype.setOauthStateJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureWriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureWriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureWriteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureWriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureWriteRequest}
 */
proto.ConfigureWriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureWriteRequest;
  return proto.ConfigureWriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureWriteRequest}
 */
proto.ConfigureWriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormRequest;
      reader.readMessage(value,proto.ConfigurationFormRequest.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureWriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureWriteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureWriteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormRequest form = 1;
 * @return {?proto.ConfigurationFormRequest}
 */
proto.ConfigureWriteRequest.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormRequest} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormRequest, 1));
};


/**
 * @param {?proto.ConfigurationFormRequest|undefined} value
 * @return {!proto.ConfigureWriteRequest} returns this
*/
proto.ConfigureWriteRequest.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureWriteRequest} returns this
 */
proto.ConfigureWriteRequest.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureWriteRequest.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureWriteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureWriteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureWriteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureWriteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormResponse.toObject(includeInstance, f),
    schema: (f = msg.getSchema()) && proto.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureWriteResponse}
 */
proto.ConfigureWriteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureWriteResponse;
  return proto.ConfigureWriteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureWriteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureWriteResponse}
 */
proto.ConfigureWriteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormResponse;
      reader.readMessage(value,proto.ConfigurationFormResponse.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    case 2:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureWriteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureWriteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureWriteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureWriteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormResponse.serializeBinaryToWriter
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormResponse form = 1;
 * @return {?proto.ConfigurationFormResponse}
 */
proto.ConfigureWriteResponse.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormResponse} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormResponse, 1));
};


/**
 * @param {?proto.ConfigurationFormResponse|undefined} value
 * @return {!proto.ConfigureWriteResponse} returns this
*/
proto.ConfigureWriteResponse.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureWriteResponse} returns this
 */
proto.ConfigureWriteResponse.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureWriteResponse.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Schema schema = 2;
 * @return {?proto.Schema}
 */
proto.ConfigureWriteResponse.prototype.getSchema = function() {
  return /** @type{?proto.Schema} */ (
    jspb.Message.getWrapperField(this, proto.Schema, 2));
};


/**
 * @param {?proto.Schema|undefined} value
 * @return {!proto.ConfigureWriteResponse} returns this
*/
proto.ConfigureWriteResponse.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureWriteResponse} returns this
 */
proto.ConfigureWriteResponse.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureWriteResponse.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConfigureReplicationRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureReplicationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureReplicationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureReplicationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureReplicationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormRequest.toObject(includeInstance, f),
    schema: (f = msg.getSchema()) && proto.Schema.toObject(includeInstance, f),
    versionsList: jspb.Message.toObjectList(msg.getVersionsList(),
    proto.ReplicationWriteVersion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureReplicationRequest}
 */
proto.ConfigureReplicationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureReplicationRequest;
  return proto.ConfigureReplicationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureReplicationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureReplicationRequest}
 */
proto.ConfigureReplicationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormRequest;
      reader.readMessage(value,proto.ConfigurationFormRequest.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    case 2:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.ReplicationWriteVersion;
      reader.readMessage(value,proto.ReplicationWriteVersion.deserializeBinaryFromReader);
      msg.addVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureReplicationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureReplicationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureReplicationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureReplicationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormRequest.serializeBinaryToWriter
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ReplicationWriteVersion.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormRequest form = 1;
 * @return {?proto.ConfigurationFormRequest}
 */
proto.ConfigureReplicationRequest.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormRequest} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormRequest, 1));
};


/**
 * @param {?proto.ConfigurationFormRequest|undefined} value
 * @return {!proto.ConfigureReplicationRequest} returns this
*/
proto.ConfigureReplicationRequest.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureReplicationRequest} returns this
 */
proto.ConfigureReplicationRequest.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureReplicationRequest.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Schema schema = 2;
 * @return {?proto.Schema}
 */
proto.ConfigureReplicationRequest.prototype.getSchema = function() {
  return /** @type{?proto.Schema} */ (
    jspb.Message.getWrapperField(this, proto.Schema, 2));
};


/**
 * @param {?proto.Schema|undefined} value
 * @return {!proto.ConfigureReplicationRequest} returns this
*/
proto.ConfigureReplicationRequest.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureReplicationRequest} returns this
 */
proto.ConfigureReplicationRequest.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureReplicationRequest.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ReplicationWriteVersion versions = 3;
 * @return {!Array<!proto.ReplicationWriteVersion>}
 */
proto.ConfigureReplicationRequest.prototype.getVersionsList = function() {
  return /** @type{!Array<!proto.ReplicationWriteVersion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReplicationWriteVersion, 3));
};


/**
 * @param {!Array<!proto.ReplicationWriteVersion>} value
 * @return {!proto.ConfigureReplicationRequest} returns this
*/
proto.ConfigureReplicationRequest.prototype.setVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ReplicationWriteVersion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReplicationWriteVersion}
 */
proto.ConfigureReplicationRequest.prototype.addVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ReplicationWriteVersion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ConfigureReplicationRequest} returns this
 */
proto.ConfigureReplicationRequest.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigureReplicationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigureReplicationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigureReplicationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureReplicationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: (f = msg.getForm()) && proto.ConfigurationFormResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigureReplicationResponse}
 */
proto.ConfigureReplicationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigureReplicationResponse;
  return proto.ConfigureReplicationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigureReplicationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigureReplicationResponse}
 */
proto.ConfigureReplicationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConfigurationFormResponse;
      reader.readMessage(value,proto.ConfigurationFormResponse.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigureReplicationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigureReplicationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigureReplicationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigureReplicationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConfigurationFormResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationFormResponse form = 1;
 * @return {?proto.ConfigurationFormResponse}
 */
proto.ConfigureReplicationResponse.prototype.getForm = function() {
  return /** @type{?proto.ConfigurationFormResponse} */ (
    jspb.Message.getWrapperField(this, proto.ConfigurationFormResponse, 1));
};


/**
 * @param {?proto.ConfigurationFormResponse|undefined} value
 * @return {!proto.ConfigureReplicationResponse} returns this
*/
proto.ConfigureReplicationResponse.prototype.setForm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConfigureReplicationResponse} returns this
 */
proto.ConfigureReplicationResponse.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConfigureReplicationResponse.prototype.hasForm = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PrepareWriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PrepareWriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PrepareWriteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrepareWriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitSlaSeconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    schema: (f = msg.getSchema()) && proto.Schema.toObject(includeInstance, f),
    replication: (f = msg.getReplication()) && proto.ReplicationWriteRequest.toObject(includeInstance, f),
    dataVersions: (f = msg.getDataVersions()) && proto.DataVersions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PrepareWriteRequest}
 */
proto.PrepareWriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PrepareWriteRequest;
  return proto.PrepareWriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PrepareWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PrepareWriteRequest}
 */
proto.PrepareWriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommitSlaSeconds(value);
      break;
    case 2:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.ReplicationWriteRequest;
      reader.readMessage(value,proto.ReplicationWriteRequest.deserializeBinaryFromReader);
      msg.setReplication(value);
      break;
    case 4:
      var value = new proto.DataVersions;
      reader.readMessage(value,proto.DataVersions.deserializeBinaryFromReader);
      msg.setDataVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PrepareWriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PrepareWriteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PrepareWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrepareWriteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitSlaSeconds();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
  f = message.getReplication();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ReplicationWriteRequest.serializeBinaryToWriter
    );
  }
  f = message.getDataVersions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.DataVersions.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 commit_sla_seconds = 1;
 * @return {number}
 */
proto.PrepareWriteRequest.prototype.getCommitSlaSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PrepareWriteRequest} returns this
 */
proto.PrepareWriteRequest.prototype.setCommitSlaSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Schema schema = 2;
 * @return {?proto.Schema}
 */
proto.PrepareWriteRequest.prototype.getSchema = function() {
  return /** @type{?proto.Schema} */ (
    jspb.Message.getWrapperField(this, proto.Schema, 2));
};


/**
 * @param {?proto.Schema|undefined} value
 * @return {!proto.PrepareWriteRequest} returns this
*/
proto.PrepareWriteRequest.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PrepareWriteRequest} returns this
 */
proto.PrepareWriteRequest.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PrepareWriteRequest.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReplicationWriteRequest replication = 3;
 * @return {?proto.ReplicationWriteRequest}
 */
proto.PrepareWriteRequest.prototype.getReplication = function() {
  return /** @type{?proto.ReplicationWriteRequest} */ (
    jspb.Message.getWrapperField(this, proto.ReplicationWriteRequest, 3));
};


/**
 * @param {?proto.ReplicationWriteRequest|undefined} value
 * @return {!proto.PrepareWriteRequest} returns this
*/
proto.PrepareWriteRequest.prototype.setReplication = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PrepareWriteRequest} returns this
 */
proto.PrepareWriteRequest.prototype.clearReplication = function() {
  return this.setReplication(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PrepareWriteRequest.prototype.hasReplication = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataVersions data_versions = 4;
 * @return {?proto.DataVersions}
 */
proto.PrepareWriteRequest.prototype.getDataVersions = function() {
  return /** @type{?proto.DataVersions} */ (
    jspb.Message.getWrapperField(this, proto.DataVersions, 4));
};


/**
 * @param {?proto.DataVersions|undefined} value
 * @return {!proto.PrepareWriteRequest} returns this
*/
proto.PrepareWriteRequest.prototype.setDataVersions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PrepareWriteRequest} returns this
 */
proto.PrepareWriteRequest.prototype.clearDataVersions = function() {
  return this.setDataVersions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PrepareWriteRequest.prototype.hasDataVersions = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReplicationWriteRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReplicationWriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ReplicationWriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReplicationWriteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReplicationWriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionsList: jspb.Message.toObjectList(msg.getVersionsList(),
    proto.ReplicationWriteVersion.toObject, includeInstance),
    settingsJson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReplicationWriteRequest}
 */
proto.ReplicationWriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReplicationWriteRequest;
  return proto.ReplicationWriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReplicationWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReplicationWriteRequest}
 */
proto.ReplicationWriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ReplicationWriteVersion;
      reader.readMessage(value,proto.ReplicationWriteVersion.deserializeBinaryFromReader);
      msg.addVersions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettingsJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReplicationWriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReplicationWriteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReplicationWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReplicationWriteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ReplicationWriteVersion.serializeBinaryToWriter
    );
  }
  f = message.getSettingsJson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated ReplicationWriteVersion versions = 1;
 * @return {!Array<!proto.ReplicationWriteVersion>}
 */
proto.ReplicationWriteRequest.prototype.getVersionsList = function() {
  return /** @type{!Array<!proto.ReplicationWriteVersion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReplicationWriteVersion, 1));
};


/**
 * @param {!Array<!proto.ReplicationWriteVersion>} value
 * @return {!proto.ReplicationWriteRequest} returns this
*/
proto.ReplicationWriteRequest.prototype.setVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ReplicationWriteVersion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReplicationWriteVersion}
 */
proto.ReplicationWriteRequest.prototype.addVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ReplicationWriteVersion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ReplicationWriteRequest} returns this
 */
proto.ReplicationWriteRequest.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * optional string settings_json = 2;
 * @return {string}
 */
proto.ReplicationWriteRequest.prototype.getSettingsJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReplicationWriteRequest} returns this
 */
proto.ReplicationWriteRequest.prototype.setSettingsJson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReplicationWriteVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.ReplicationWriteVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReplicationWriteVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReplicationWriteVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jobId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    jobName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    schemaId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    schemaName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    capturedSchemaDataPropertiesMap: (f = msg.getCapturedSchemaDataPropertiesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReplicationWriteVersion}
 */
proto.ReplicationWriteVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReplicationWriteVersion;
  return proto.ReplicationWriteVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReplicationWriteVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReplicationWriteVersion}
 */
proto.ReplicationWriteVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaName(value);
      break;
    case 7:
      var value = msg.getCapturedSchemaDataPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReplicationWriteVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReplicationWriteVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReplicationWriteVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReplicationWriteVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getJobName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSchemaName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCapturedSchemaDataPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.ReplicationWriteVersion.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReplicationWriteVersion} returns this
 */
proto.ReplicationWriteVersion.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_name = 2;
 * @return {string}
 */
proto.ReplicationWriteVersion.prototype.getConnectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReplicationWriteVersion} returns this
 */
proto.ReplicationWriteVersion.prototype.setConnectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string job_id = 3;
 * @return {string}
 */
proto.ReplicationWriteVersion.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReplicationWriteVersion} returns this
 */
proto.ReplicationWriteVersion.prototype.setJobId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string job_name = 4;
 * @return {string}
 */
proto.ReplicationWriteVersion.prototype.getJobName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReplicationWriteVersion} returns this
 */
proto.ReplicationWriteVersion.prototype.setJobName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string schema_id = 5;
 * @return {string}
 */
proto.ReplicationWriteVersion.prototype.getSchemaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReplicationWriteVersion} returns this
 */
proto.ReplicationWriteVersion.prototype.setSchemaId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string schema_name = 6;
 * @return {string}
 */
proto.ReplicationWriteVersion.prototype.getSchemaName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReplicationWriteVersion} returns this
 */
proto.ReplicationWriteVersion.prototype.setSchemaName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, PropertyType> captured_schema_data_properties = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.PropertyType>}
 */
proto.ReplicationWriteVersion.prototype.getCapturedSchemaDataPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.PropertyType>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ReplicationWriteVersion} returns this
 */
proto.ReplicationWriteVersion.prototype.clearCapturedSchemaDataPropertiesMap = function() {
  this.getCapturedSchemaDataPropertiesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PrepareWriteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PrepareWriteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PrepareWriteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrepareWriteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PrepareWriteResponse}
 */
proto.PrepareWriteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PrepareWriteResponse;
  return proto.PrepareWriteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PrepareWriteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PrepareWriteResponse}
 */
proto.PrepareWriteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PrepareWriteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PrepareWriteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PrepareWriteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrepareWriteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RecordAck.prototype.toObject = function(opt_includeInstance) {
  return proto.RecordAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RecordAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RecordAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RecordAck}
 */
proto.RecordAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RecordAck;
  return proto.RecordAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RecordAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RecordAck}
 */
proto.RecordAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RecordAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RecordAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RecordAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RecordAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string correlation_id = 1;
 * @return {string}
 */
proto.RecordAck.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RecordAck} returns this
 */
proto.RecordAck.prototype.setCorrelationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.RecordAck.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RecordAck} returns this
 */
proto.RecordAck.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DiscoverRelatedEntitiesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DiscoverRelatedEntitiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DiscoverRelatedEntitiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DiscoverRelatedEntitiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DiscoverRelatedEntitiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    toRelateList: jspb.Message.toObjectList(msg.getToRelateList(),
    proto.Schema.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DiscoverRelatedEntitiesRequest}
 */
proto.DiscoverRelatedEntitiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DiscoverRelatedEntitiesRequest;
  return proto.DiscoverRelatedEntitiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DiscoverRelatedEntitiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DiscoverRelatedEntitiesRequest}
 */
proto.DiscoverRelatedEntitiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Schema;
      reader.readMessage(value,proto.Schema.deserializeBinaryFromReader);
      msg.addToRelate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DiscoverRelatedEntitiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DiscoverRelatedEntitiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DiscoverRelatedEntitiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DiscoverRelatedEntitiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToRelateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Schema to_relate = 1;
 * @return {!Array<!proto.Schema>}
 */
proto.DiscoverRelatedEntitiesRequest.prototype.getToRelateList = function() {
  return /** @type{!Array<!proto.Schema>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Schema, 1));
};


/**
 * @param {!Array<!proto.Schema>} value
 * @return {!proto.DiscoverRelatedEntitiesRequest} returns this
*/
proto.DiscoverRelatedEntitiesRequest.prototype.setToRelateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Schema=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Schema}
 */
proto.DiscoverRelatedEntitiesRequest.prototype.addToRelate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Schema, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DiscoverRelatedEntitiesRequest} returns this
 */
proto.DiscoverRelatedEntitiesRequest.prototype.clearToRelateList = function() {
  return this.setToRelateList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DiscoverRelatedEntitiesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DiscoverRelatedEntitiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DiscoverRelatedEntitiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DiscoverRelatedEntitiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DiscoverRelatedEntitiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    relatedEntitiesList: jspb.Message.toObjectList(msg.getRelatedEntitiesList(),
    proto.RelatedEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DiscoverRelatedEntitiesResponse}
 */
proto.DiscoverRelatedEntitiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DiscoverRelatedEntitiesResponse;
  return proto.DiscoverRelatedEntitiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DiscoverRelatedEntitiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DiscoverRelatedEntitiesResponse}
 */
proto.DiscoverRelatedEntitiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RelatedEntity;
      reader.readMessage(value,proto.RelatedEntity.deserializeBinaryFromReader);
      msg.addRelatedEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DiscoverRelatedEntitiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DiscoverRelatedEntitiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DiscoverRelatedEntitiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DiscoverRelatedEntitiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelatedEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.RelatedEntity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RelatedEntity related_entities = 1;
 * @return {!Array<!proto.RelatedEntity>}
 */
proto.DiscoverRelatedEntitiesResponse.prototype.getRelatedEntitiesList = function() {
  return /** @type{!Array<!proto.RelatedEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RelatedEntity, 1));
};


/**
 * @param {!Array<!proto.RelatedEntity>} value
 * @return {!proto.DiscoverRelatedEntitiesResponse} returns this
*/
proto.DiscoverRelatedEntitiesResponse.prototype.setRelatedEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.RelatedEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RelatedEntity}
 */
proto.DiscoverRelatedEntitiesResponse.prototype.addRelatedEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.RelatedEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DiscoverRelatedEntitiesResponse} returns this
 */
proto.DiscoverRelatedEntitiesResponse.prototype.clearRelatedEntitiesList = function() {
  return this.setRelatedEntitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RelatedEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.RelatedEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RelatedEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelatedEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceResource: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceColumn: jspb.Message.getFieldWithDefault(msg, 3, ""),
    foreignResource: jspb.Message.getFieldWithDefault(msg, 4, ""),
    foreignColumn: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relationshipName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RelatedEntity}
 */
proto.RelatedEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RelatedEntity;
  return proto.RelatedEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RelatedEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RelatedEntity}
 */
proto.RelatedEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceResource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceColumn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setForeignResource(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setForeignColumn(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelationshipName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RelatedEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RelatedEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RelatedEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelatedEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceResource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceColumn();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getForeignResource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getForeignColumn();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelationshipName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string schema_id = 1;
 * @return {string}
 */
proto.RelatedEntity.prototype.getSchemaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelatedEntity} returns this
 */
proto.RelatedEntity.prototype.setSchemaId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source_resource = 2;
 * @return {string}
 */
proto.RelatedEntity.prototype.getSourceResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelatedEntity} returns this
 */
proto.RelatedEntity.prototype.setSourceResource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source_column = 3;
 * @return {string}
 */
proto.RelatedEntity.prototype.getSourceColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelatedEntity} returns this
 */
proto.RelatedEntity.prototype.setSourceColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string foreign_resource = 4;
 * @return {string}
 */
proto.RelatedEntity.prototype.getForeignResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelatedEntity} returns this
 */
proto.RelatedEntity.prototype.setForeignResource = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string foreign_column = 5;
 * @return {string}
 */
proto.RelatedEntity.prototype.getForeignColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelatedEntity} returns this
 */
proto.RelatedEntity.prototype.setForeignColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string relationship_name = 6;
 * @return {string}
 */
proto.RelatedEntity.prototype.getRelationshipName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelatedEntity} returns this
 */
proto.RelatedEntity.prototype.setRelationshipName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.LogLevel = {
  ERROR: 0,
  WARN: 1,
  INFO: 2,
  DEBUG: 3,
  TRACE: 4
};

/**
 * @enum {number}
 */
proto.PropertyType = {
  STRING: 0,
  BOOL: 2,
  INTEGER: 3,
  FLOAT: 4,
  DECIMAL: 5,
  DATE: 6,
  TIME: 7,
  DATETIME: 8,
  TEXT: 9,
  BLOB: 10,
  JSON: 11,
  XML: 12
};

goog.object.extend(exports, proto);
